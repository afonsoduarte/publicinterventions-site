{"version":3,"sources":["../assets/js/raphael-score.js"],"names":["drawScore","window","precision","paperWidth","paperHeight","paddingLeft","paddingRight","notWorkingSensors","refactoredIds","time","timeToSkip","timeDivider","scale","dayOfTheMonth","timeStampLabelFrequency","projectLabelFrequency","timeStampIncrement","dots","dotsByY","dotsByYRounded","idMax","date","Date","Array","prototype","contains","needle","i","this","getMinutesTwoDigits","retval","getMinutes","toString","paper","Raphael","setViewBox","setSize","skip","j","push","temp_max","Data","length","id","indexOf","x","y","Math","round","r","fill","col","circle","attr","data","click","e","console","log","dotObj","xid","roundedY","resizeRatio","$","height","throttle","fn","threshhold","scope","last","deferTimer","context","now","args","arguments","clearTimeout","setTimeout","apply","filterByY","obj","currentPosition","barPostion","getClosestValue","a","lo","hi","mid","enableAudio","element","audio","onEnd","callback","forceStop","removeEventListener","pause","progress","addEventListener","play","document","getElementsByTagName","onscroll","scrollTop","dotArray","anim","animation","animBack","getById","animate","delay","audioId"],"mappings":"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","file":"raphael-score.js","sourcesContent":["function drawScore() {\n  // CONSTANTS\n\n  // Precision constant to divide Y position by\n  window.precision = 10;\n\n  // Paper size: 21cm x 27cm\n  // Minus top and bottom margin: 16.6 x 27 cm\n  // Paper ratio: 0.6148148148\n  // I've converted the spread height to 2000, for easier divisions.\n  // Therefore, width needs to be 2000 * 0.6148148148 ~= 1230\n\n  var paperWidth = 1475,\n      paperHeight = 2400 * 8,\n      paperRatio = paperWidth/paperHeight,\n      paddingLeft = 0, \n      paddingRight = 0,\n      notWorkingSensors = [],//[4,5,6,7,10,11,14,15,16,20,21,23,28,30,31,32,36,38,40,41,45,46,49,50],\n      refactoredIds = [],\n      time = 0, \n\n      // 45 s in a page\n      // 1m30s in a spread\n      // line every 15s (4 big lines per spread)\n      // 8 spreads total\n\n      timeToSkip = 0,\n      timeDivider = 54,\n      baseline = 20, // line every 33px, ie, 1 sec\n      gridSize = 400, // 6 big lines per spread: 2400/6 = 400\n      gridOffset = 200; // push big lines to middle of page\n      scale = 1, //1.915,\n      \n      dayOfTheMonth = 31,\n      timeStampLabelFrequency = 5,\n      projectLabelFrequency = 5,\n      timeStampIncrement = 2,\n\n      dots = [],\n      dotsByY = [],\n      dotsByYRounded = [];\n\n  // Variables from PHP\n  var timeMin = 122484,\n      timeMax = 1123019,\n      idMin = 1,\n      idMax = 53,\n      soundMin = 1,\n      soundMax = 24;\n      // date = new Date(\"October \"+dayOfTheMonth+\", 2012 11:50:00\"),\n          \n      date = new Date(\"October 31, 2013 13:00:00\");\n\n  /**\n   * Array.prototype.[method name] allows you to define/overwrite an objects method\n   * needle is the item you are searching for\n   * this is a special variable that refers to \"this\" instance of an Array.\n   * returns true if needle is in the array, and false otherwise\n   */\n  Array.prototype.contains = function ( needle ) {\n     for (i in this) {\n         if (this[i] == needle) return true;\n     }\n     return false;\n  }\n\n  // Pad minutes\n  Date.prototype.getMinutesTwoDigits = function()\n  {\n      var retval = this.getMinutes();\n      if (retval < 10)\n      {\n          return (\"0\" + retval.toString());\n      }\n      else\n      {\n          return retval.toString();\n      }\n  }\n\n\n  // Creates canvas \n  window.paper = Raphael(\"raphael-score\");\n  paper.setViewBox(0,0,paperWidth,paperHeight,true);\n  paper.setSize('100%', '100%');\n\n  // skip broken sensors\n  for(var i = 1; i <= idMax; i++) {\n    var skip = false;\n\n    for(j in notWorkingSensors) {\n      if (notWorkingSensors[j] === i) { \n        skip = true;\n      }\n    }\n    if(!skip) refactoredIds.push(i); \n  }\n\n  // Draw score\n  var temp_max = Data.length;\n  for(var i = 0; i < temp_max ; i++) {\n    time += Data[i][0];\n\n    switch (i) {\n      case 19:\n        timeToSkip = 43200000 - (1000 * 60 * 60 * 2); \n        break;\n      case 21:\n        timeToSkip = 43200000 - (1000 * 60 * 60 * 6);\n        break;\n      default:\n        timeToSkip = 43200000;\n        break;\n    }\n\n     timeToSkip = 120000; \n\n    //Start at noon\n    if( time < timeToSkip ) continue;\n      \n      var id = refactoredIds.indexOf(Data[i][1]),\n          x = ((paperWidth-20-paddingLeft-paddingRight)/refactoredIds.length) * (id + 1) + (paddingLeft), // \n          y = Math.round((Data[i][0] + time - timeToSkip)/timeDivider),\n          time = time,\n          r = (Data[i][2] / 2.5) + 4,\n          // col = \"hsl(\"+(Data[i][2]*4)/100+\", 0.5, 0.5)\"; //COLOUR\n          // col = \"hsl(1, 0, \"+(Data[i][2] * 2)/100 +\")\"; //B&W\n          fill = \"#000\"; //url(../assets/fill-2.svg)\",\n          col = \"none\"; // \"#000\"; // Just black, we differentiate with patterns\n\n      // first item has an absolute first value\n      if(i === 0) y = Math.round((Data[i][0] - timeToSkip)/timeDivider);\n\n      // console.log(i, Data[i][0], time, timeToSkip, timeDivider, y, paperHeight);\n\n      // Stop after reaching the bottom of the paper\n      if( y > paperHeight) break;\n\n      // Creates circle (x, y, radius)\n      paper.circle( x/scale, y/scale, r/scale)    \n          // Sets the fill attribute of the circle to red (#f00)\n          .attr( \"fill\",  fill)\n\n          // Sets the stroke attribute of the circle to white\n          .attr(\"stroke\", col)\n\n          // Sets text\n          .data({\"col\": col ,\"id\": Data[i][1], \"x\": x, \"y\": y, \"i\": i, \"r\": r, \"time\": time/1000 })\n          .click(function (e) {\n            console.log(\"i:\" + this.data(\"i\"), \"y:\" + this.data(\"y\"), \"x:\" + this.data(\"x\"), \"xid:\" + this.data(\"id\"), \"r:\" + this.data(\"r\"));\n          })\n          ;\n\n      // Store data in object for fast search\n      dotObj = {\"id\": i, \"xid\": Data[i][1], \"r\": r};\n      dotsByY[y] = dotObj;\n\n      roundedY = Math.round(y/precision);\n\n      // Check if array has already been created\n      if( !dotsByYRounded[roundedY] ) {\n        dotsByYRounded[roundedY] = [];\n      }\n      dotsByYRounded[roundedY].push(dotObj);\n\n      // Since paper resizes to fit width, we need to \n      // find its resize ratio\n      resizeRatio = ($(\"#raphael-score\").height())/(2400 * 8);\n  }\n}\n\nfunction throttle(fn, threshhold, scope) {\n  threshhold || (threshhold = 250);\n  var last,\n      deferTimer;\n  return function () {\n    var context = scope || this;\n\n    var now = +new Date,\n        args = arguments;\n    if (last && now < last + threshhold) {\n      // hold on to it\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function () {\n        last = now;\n        fn.apply(context, args);\n      }, threshhold);\n    } else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}\n\nfunction filterByY(obj, i, currentPosition) {\n  return (obj.y === barPostion);\n}\n\nfunction getClosestValue(a, x) {\n  var lo = -1, hi = a.length;\n  while (hi - lo > 1) {\n    var mid = Math.round((lo + hi)/2);\n    if (a[mid] <= x) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  if (a[lo] == x) hi = lo;\n  return a[hi]; //[a[lo], a[hi]];\n}\n\nvar audio = document.getElementsByTagName(\"audio\");\n\nfunction enableAudio(element, audio, onEnd){\n  var callback = false,\n      click    = false;\n\n  click = function(e){\n    var forceStop = function () {\n          audio.removeEventListener('play', forceStop, false);\n          audio.pause();\n          element.removeEventListener('touchend', click, false);\n          if(onEnd) onEnd();\n        },\n        progress  = function () {\n          audio.removeEventListener('canplaythrough', progress, false);\n          if (callback) callback();\n        };\n\n    audio.addEventListener('play', forceStop, false);\n    audio.addEventListener('canplaythrough', progress, false);\n    try { \n      audio.play();\n    } catch (e) {\n      callback = function () {\n        callback = false;\n        audio.play();\n      };\n    }\n  };\n  element.addEventListener('touchend', click, false);\n}\n\n\nfor (var i = audio.length - 1; i >= 0; i--) {\n  enableAudio(window.document, audio[i]);\n};\n\nwindow.onscroll = function(e) {\n  // paper.canvas.children[4].attributes[0].value\n  // paper.getElementByPoint(x, y)\n\n  barPostion = Math.round(($(\"body\").scrollTop() + 15)/resizeRatio);\n\n  var dotArray = dotsByYRounded[Math.round(barPostion/precision)];\n\n  if(dotArray) {\n\n    for (var i = dotArray.length - 1; i >= 0; i--) {\n\n      var anim = Raphael.animation({r: 40}, 400, \"backOut\");\n      var animBack = Raphael.animation({r: dotArray[i].r}, 400, \"bounce\");\n\n      paper.getById(dotArray[i].id).animate(anim).animate(animBack.delay(300));\n\n      audioId = dotArray[i].xid;\n      if(dotArray[i].xid > 22) audioId = dotArray[i].xid - 22;\n      if(dotArray[i].xid > 44) audioId = dotArray[i].xid - 44;\n      // console.log(dotArray[i].xid, audioId);\n      audio[audioId].play();\n    };\n  }\n\n};\n"],"sourceRoot":"/source/"}